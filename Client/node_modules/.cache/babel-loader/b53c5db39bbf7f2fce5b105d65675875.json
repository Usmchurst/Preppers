{"ast":null,"code":"import { getUrlPrefix, getUrlVersion, handleAssetType, handleDeliveryType } from \"../internal/url/cloudinaryURL.js\";\nimport URLConfig from \"../config/URLConfig.js\";\nimport { getSDKAnalyticsSignature } from \"../sdkAnalytics/getSDKAnalyticsSignature.js\";\n/**\n * This const contains all the valid combination of asset/delivery for URL shortening purposes\n * It's exported because it's used in a test, but it's not really shared enough to belong in a separate file\n */\n\nexport const SEO_TYPES = {\n  \"image/upload\": \"images\",\n  \"image/private\": \"private_images\",\n  \"image/authenticated\": \"authenticated_images\",\n  \"raw/upload\": \"files\",\n  \"video/upload\": \"videos\"\n};\n/**\n * @description Cloudinary file without a transformation\n * @summary SDK\n * @memberOf SDK\n */\n\nclass CloudinaryFile {\n  constructor(publicID) {\n    let cloudConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let urlConfig = arguments.length > 2 ? arguments[2] : undefined;\n    this.setPublicID(publicID);\n    this.setCloudConfig(cloudConfig);\n    this.setURLConfig(urlConfig);\n  }\n  /**\n   * @description Sets the URL Config for this asset\n   * @param urlConfig\n   * @return {this}\n   */\n\n\n  setURLConfig(urlConfig) {\n    this.urlConfig = new URLConfig(urlConfig);\n    return this;\n  }\n  /**\n   * @description Sets the Cloud Config for this asset\n   * @param urlConfig\n   * @return {this}\n   */\n\n\n  setCloudConfig(cloudConfig) {\n    this.cloudName = cloudConfig.cloudName;\n    this.apiKey = cloudConfig.apiKey;\n    this.apiSecret = cloudConfig.apiSecret;\n    this.authToken = cloudConfig.authToken;\n    return this;\n  }\n  /**\n   * @description Sets the public ID of the asset.\n   * @param {string} publicID The public ID of the asset.\n   * @return {this}\n   */\n\n\n  setPublicID(publicID) {\n    // PublicID must be a string!\n    this.publicID = publicID ? publicID.toString() : '';\n    return this;\n  }\n  /**\n   * @description Sets the delivery type of the asset.\n   * @param {DELIVERY_TYPE | string} newType The type of the asset.\n   * @return {this}\n   */\n\n\n  setDeliveryType(newType) {\n    this.deliveryType = newType;\n    return this;\n  }\n  /**\n   * @description Sets the URL SEO suffix of the asset.\n   * @param {string} newSuffix The SEO suffix.\n   * @return {this}\n   */\n\n\n  setSuffix(newSuffix) {\n    this.suffix = newSuffix;\n    return this;\n  }\n  /**\n   * @description Sets the signature of the asset.\n   * @param {string} signature The signature.\n   * @return {this}\n   */\n\n\n  setSignature(signature) {\n    this.signature = signature;\n    return this;\n  }\n  /**\n   * @description Sets the version of the asset.\n   * @param {string} newVersion The version of the asset.\n   * @return {this}\n   */\n\n\n  setVersion(newVersion) {\n    if (newVersion) {\n      this.version = newVersion;\n    }\n\n    return this;\n  }\n  /**\n   * @description Sets the asset type.\n   * @param {string} newType The type of the asset.\n   * @return {this}\n   */\n\n\n  setAssetType(newType) {\n    if (newType) {\n      this.assetType = newType;\n    }\n\n    return this;\n  }\n\n  sign() {\n    return this;\n  }\n  /**\n   * @description Serializes to URL string\n   * @param overwriteOptions\n   */\n\n\n  toURL() {\n    let overwriteOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return this.createCloudinaryURL(null, overwriteOptions.trackedAnalytics);\n  }\n  /**\n   * @description Validate various options before attempting to create a URL\n   * The function will throw in case a violation\n   * @throws Validation errors\n   */\n\n\n  validateAssetForURLCreation() {\n    if (typeof this.cloudName === 'undefined') {\n      throw 'You must supply a cloudName when initializing the asset';\n    }\n\n    const suffixContainsDot = this.suffix && this.suffix.indexOf('.') >= 0;\n    const suffixContainsSlash = this.suffix && this.suffix.indexOf('/') >= 0;\n\n    if (suffixContainsDot || suffixContainsSlash) {\n      throw '`suffix`` should not include . or /';\n    }\n  }\n  /**\n   * @description return an SEO friendly name for a combination of asset/delivery, some examples:\n   * * image/upload -> images\n   * * video/upload -> videos\n   * If no match is found, return `{asset}/{delivery}`\n   */\n\n\n  getResourceType() {\n    const assetType = handleAssetType(this.assetType);\n    const deliveryType = handleDeliveryType(this.deliveryType);\n    const hasSuffix = !!this.suffix;\n    const regularSEOType = `${assetType}/${deliveryType}`;\n    const shortSEOType = SEO_TYPES[`${assetType}/${deliveryType}`];\n    const useRootPath = this.urlConfig.useRootPath;\n    const shorten = this.urlConfig.shorten; // Quick exit incase of useRootPath\n\n    if (useRootPath) {\n      if (regularSEOType === 'image/upload') {\n        return ''; // For image/upload we're done, just return nothing\n      } else {\n        throw new Error(`useRootPath can only be used with assetType: 'image' and deliveryType: 'upload'. Provided: ${regularSEOType} instead`);\n      }\n    }\n\n    if (shorten && regularSEOType === 'image/upload') {\n      return 'iu';\n    }\n\n    if (hasSuffix) {\n      if (shortSEOType) {\n        return shortSEOType;\n      } else {\n        throw new Error(`URL Suffix only supported for ${Object.keys(SEO_TYPES).join(', ')}, Provided: ${regularSEOType} instead`);\n      }\n    } // If all else fails, return the regular image/upload combination (asset/delivery)\n\n\n    return regularSEOType;\n  }\n\n  getSignature() {\n    if (this.signature) {\n      return `s--${this.signature}--`;\n    } else {\n      return '';\n    }\n  }\n  /**\n   *\n   * @description Creates a fully qualified CloudinaryURL\n   * @return {string} CloudinaryURL\n   * @throws Validation Errors\n   */\n\n\n  createCloudinaryURL(transformation, trackedAnalytics) {\n    // In accordance with the existing implementation, if no publicID exists we should return nothing.\n    if (!this.publicID) {\n      return '';\n    } // Throws if some options are mis-configured\n    // See the function for more information on when it throws\n\n\n    this.validateAssetForURLCreation();\n    const prefix = getUrlPrefix(this.cloudName, this.urlConfig);\n    const transformationString = transformation ? transformation.toString() : '';\n    const version = getUrlVersion(this.publicID, this.version, this.urlConfig.forceVersion);\n    const publicID = this.publicID // Serialize the publicID, but leave slashes alone.\n    // we can't use serializeCloudinaryCharacters because that does both things (, and /)\n    .replace(/,/g, '%2C'); // Resource type is a mixture of assetType, deliveryType and various URL Configurations\n    // Note how `suffix` changes both image/upload (resourceType) and also is appended at the end\n\n    const url = [prefix, this.getResourceType(), this.getSignature(), transformationString, version, publicID, this.suffix].filter(a => a).join('/');\n\n    if (typeof transformation === 'string') {\n      return url;\n    } else {\n      const safeURL = encodeURI(url).replace(/\\?/g, '%3F').replace(/=/g, '%3D'); // urlConfig.analytics is true by default, has to be explicitly set to false to overwrite\n      // Don't add analytics when publicId includes a '?' to not risk changing existing query params\n\n      if (this.urlConfig.analytics !== false && !publicID.includes('?')) {\n        return `${safeURL}?_a=${getSDKAnalyticsSignature(trackedAnalytics)}`;\n      } else {\n        return safeURL;\n      }\n    }\n  }\n\n}\n\nexport { CloudinaryFile };","map":{"version":3,"names":["getUrlPrefix","getUrlVersion","handleAssetType","handleDeliveryType","URLConfig","getSDKAnalyticsSignature","SEO_TYPES","CloudinaryFile","constructor","publicID","cloudConfig","urlConfig","setPublicID","setCloudConfig","setURLConfig","cloudName","apiKey","apiSecret","authToken","toString","setDeliveryType","newType","deliveryType","setSuffix","newSuffix","suffix","setSignature","signature","setVersion","newVersion","version","setAssetType","assetType","sign","toURL","overwriteOptions","createCloudinaryURL","trackedAnalytics","validateAssetForURLCreation","suffixContainsDot","indexOf","suffixContainsSlash","getResourceType","hasSuffix","regularSEOType","shortSEOType","useRootPath","shorten","Error","Object","keys","join","getSignature","transformation","prefix","transformationString","forceVersion","replace","url","filter","a","safeURL","encodeURI","analytics","includes"],"sources":["/Users/noahgaston/Desktop/Preppers/Client/node_modules/@cloudinary/url-gen/assets/CloudinaryFile.js"],"sourcesContent":["import { getUrlPrefix, getUrlVersion, handleAssetType, handleDeliveryType } from \"../internal/url/cloudinaryURL.js\";\nimport URLConfig from \"../config/URLConfig.js\";\nimport { getSDKAnalyticsSignature } from \"../sdkAnalytics/getSDKAnalyticsSignature.js\";\n/**\n * This const contains all the valid combination of asset/delivery for URL shortening purposes\n * It's exported because it's used in a test, but it's not really shared enough to belong in a separate file\n */\nexport const SEO_TYPES = {\n    \"image/upload\": \"images\",\n    \"image/private\": \"private_images\",\n    \"image/authenticated\": \"authenticated_images\",\n    \"raw/upload\": \"files\",\n    \"video/upload\": \"videos\"\n};\n/**\n * @description Cloudinary file without a transformation\n * @summary SDK\n * @memberOf SDK\n */\nclass CloudinaryFile {\n    constructor(publicID, cloudConfig = {}, urlConfig) {\n        this.setPublicID(publicID);\n        this.setCloudConfig(cloudConfig);\n        this.setURLConfig(urlConfig);\n    }\n    /**\n     * @description Sets the URL Config for this asset\n     * @param urlConfig\n     * @return {this}\n     */\n    setURLConfig(urlConfig) {\n        this.urlConfig = new URLConfig(urlConfig);\n        return this;\n    }\n    /**\n     * @description Sets the Cloud Config for this asset\n     * @param urlConfig\n     * @return {this}\n     */\n    setCloudConfig(cloudConfig) {\n        this.cloudName = cloudConfig.cloudName;\n        this.apiKey = cloudConfig.apiKey;\n        this.apiSecret = cloudConfig.apiSecret;\n        this.authToken = cloudConfig.authToken;\n        return this;\n    }\n    /**\n     * @description Sets the public ID of the asset.\n     * @param {string} publicID The public ID of the asset.\n     * @return {this}\n     */\n    setPublicID(publicID) {\n        // PublicID must be a string!\n        this.publicID = publicID ? publicID.toString() : '';\n        return this;\n    }\n    /**\n     * @description Sets the delivery type of the asset.\n     * @param {DELIVERY_TYPE | string} newType The type of the asset.\n     * @return {this}\n     */\n    setDeliveryType(newType) {\n        this.deliveryType = newType;\n        return this;\n    }\n    /**\n     * @description Sets the URL SEO suffix of the asset.\n     * @param {string} newSuffix The SEO suffix.\n     * @return {this}\n     */\n    setSuffix(newSuffix) {\n        this.suffix = newSuffix;\n        return this;\n    }\n    /**\n     * @description Sets the signature of the asset.\n     * @param {string} signature The signature.\n     * @return {this}\n     */\n    setSignature(signature) {\n        this.signature = signature;\n        return this;\n    }\n    /**\n     * @description Sets the version of the asset.\n     * @param {string} newVersion The version of the asset.\n     * @return {this}\n     */\n    setVersion(newVersion) {\n        if (newVersion) {\n            this.version = newVersion;\n        }\n        return this;\n    }\n    /**\n     * @description Sets the asset type.\n     * @param {string} newType The type of the asset.\n     * @return {this}\n     */\n    setAssetType(newType) {\n        if (newType) {\n            this.assetType = newType;\n        }\n        return this;\n    }\n    sign() {\n        return this;\n    }\n    /**\n     * @description Serializes to URL string\n     * @param overwriteOptions\n     */\n    toURL(overwriteOptions = {}) {\n        return this.createCloudinaryURL(null, overwriteOptions.trackedAnalytics);\n    }\n    /**\n     * @description Validate various options before attempting to create a URL\n     * The function will throw in case a violation\n     * @throws Validation errors\n     */\n    validateAssetForURLCreation() {\n        if (typeof this.cloudName === 'undefined') {\n            throw 'You must supply a cloudName when initializing the asset';\n        }\n        const suffixContainsDot = this.suffix && this.suffix.indexOf('.') >= 0;\n        const suffixContainsSlash = this.suffix && this.suffix.indexOf('/') >= 0;\n        if (suffixContainsDot || suffixContainsSlash) {\n            throw '`suffix`` should not include . or /';\n        }\n    }\n    /**\n     * @description return an SEO friendly name for a combination of asset/delivery, some examples:\n     * * image/upload -> images\n     * * video/upload -> videos\n     * If no match is found, return `{asset}/{delivery}`\n     */\n    getResourceType() {\n        const assetType = handleAssetType(this.assetType);\n        const deliveryType = handleDeliveryType(this.deliveryType);\n        const hasSuffix = !!this.suffix;\n        const regularSEOType = `${assetType}/${deliveryType}`;\n        const shortSEOType = SEO_TYPES[`${assetType}/${deliveryType}`];\n        const useRootPath = this.urlConfig.useRootPath;\n        const shorten = this.urlConfig.shorten;\n        // Quick exit incase of useRootPath\n        if (useRootPath) {\n            if (regularSEOType === 'image/upload') {\n                return ''; // For image/upload we're done, just return nothing\n            }\n            else {\n                throw new Error(`useRootPath can only be used with assetType: 'image' and deliveryType: 'upload'. Provided: ${regularSEOType} instead`);\n            }\n        }\n        if (shorten && regularSEOType === 'image/upload') {\n            return 'iu';\n        }\n        if (hasSuffix) {\n            if (shortSEOType) {\n                return shortSEOType;\n            }\n            else {\n                throw new Error(`URL Suffix only supported for ${Object.keys(SEO_TYPES).join(', ')}, Provided: ${regularSEOType} instead`);\n            }\n        }\n        // If all else fails, return the regular image/upload combination (asset/delivery)\n        return regularSEOType;\n    }\n    getSignature() {\n        if (this.signature) {\n            return `s--${this.signature}--`;\n        }\n        else {\n            return '';\n        }\n    }\n    /**\n     *\n     * @description Creates a fully qualified CloudinaryURL\n     * @return {string} CloudinaryURL\n     * @throws Validation Errors\n     */\n    createCloudinaryURL(transformation, trackedAnalytics) {\n        // In accordance with the existing implementation, if no publicID exists we should return nothing.\n        if (!this.publicID) {\n            return '';\n        }\n        // Throws if some options are mis-configured\n        // See the function for more information on when it throws\n        this.validateAssetForURLCreation();\n        const prefix = getUrlPrefix(this.cloudName, this.urlConfig);\n        const transformationString = transformation ? transformation.toString() : '';\n        const version = getUrlVersion(this.publicID, this.version, this.urlConfig.forceVersion);\n        const publicID = this.publicID\n            // Serialize the publicID, but leave slashes alone.\n            // we can't use serializeCloudinaryCharacters because that does both things (, and /)\n            .replace(/,/g, '%2C');\n        // Resource type is a mixture of assetType, deliveryType and various URL Configurations\n        // Note how `suffix` changes both image/upload (resourceType) and also is appended at the end\n        const url = [prefix, this.getResourceType(), this.getSignature(), transformationString, version, publicID, this.suffix]\n            .filter((a) => a)\n            .join('/');\n        if (typeof transformation === 'string') {\n            return url;\n        }\n        else {\n            const safeURL = encodeURI(url)\n                .replace(/\\?/g, '%3F')\n                .replace(/=/g, '%3D');\n            // urlConfig.analytics is true by default, has to be explicitly set to false to overwrite\n            // Don't add analytics when publicId includes a '?' to not risk changing existing query params\n            if (this.urlConfig.analytics !== false && !(publicID.includes('?'))) {\n                return `${safeURL}?_a=${getSDKAnalyticsSignature(trackedAnalytics)}`;\n            }\n            else {\n                return safeURL;\n            }\n        }\n    }\n}\nexport { CloudinaryFile };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}