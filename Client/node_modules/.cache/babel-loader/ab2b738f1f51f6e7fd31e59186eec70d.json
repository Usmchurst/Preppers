{"ast":null,"code":"import { Qualifier } from \"../../../internal/qualifier/Qualifier.js\";\nimport { Action } from \"../../../internal/Action.js\";\nimport { custom, faces } from \"../../../qualifiers/region.js\";\n/**\n * @description The Action class of the pixelate Builder\n * @extends SDK.Action\n * @memberOf Actions.Effect\n * @see Visit {@link Actions.Effect|Effect} for an example\n */\n\nclass Pixelate extends Action {\n  constructor(squareSize) {\n    super();\n    this._actionModel = {};\n    this._squareSize = squareSize;\n    this._actionModel.actionType = 'pixelate';\n    this._actionModel.squareSize = squareSize;\n  }\n  /**\n   * @description Specifies the region to piexlate.\n   * @param {NamedRegion} pixelateRegion\n   */\n\n\n  region(pixelateRegion) {\n    this._region = pixelateRegion;\n    this._actionModel.region = {\n      RegionType: this._region.regionType\n    };\n    return this;\n  }\n  /**\n   * @description Sets the squareSize of the pixelate effect.\n   * @param {number | string} squareSize\n   */\n\n\n  squareSize(squareSize) {\n    this._squareSize = squareSize;\n    this._actionModel.squareSize = squareSize;\n    return this;\n  }\n\n  prepareQualifiers() {\n    /*\n     * pixelate with region is a unique object in this codebase.\n     * On top of pixelate being an Action with Qualifiers,\n     * it also accepts a Qualifier called Region.\n     *\n     * This Qualifier is in itself composite of qualifiers (such as height, or width).\n     * The existence of Region changes the output of pixelate in non traditional ways\n     * which forced this relatively ad-hoc implementation.\n     *\n     * Aside from all of that, all of the Qualifiers in the component should be alphabetized\n     * This happens naturally in the Action class,\n     * however since we're dealing with two levels of qualifiers (pixelate and Region),\n     * these need to be merged.\n     *\n     * This function will merge the Region qualifiers with pixelate\n     * and add all needed implicit qualifiers (like g_ocr_text).\n     * We're not using the full Gravity Qualifier here to prevent the code import for such a simplistic case\n     */\n    const str = this._squareSize ? `:${this._squareSize}` : '';\n\n    if ('_region' in this) {\n      const qualifiers = this._region.qualifiers; // Copy qualifiers from the region \"action\" to the pixelate action\n\n      qualifiers.forEach(q => this.addQualifier(q));\n\n      if (this._region.regionType === 'named') {\n        this.addQualifier(new Qualifier('e', `pixelate_region${str}`));\n      }\n\n      if (this._region.regionType === 'ocr_text') {\n        this.addQualifier(new Qualifier('e', `pixelate_region${str}`));\n        this.addQualifier(new Qualifier('g', `ocr_text`));\n      }\n\n      if (this._region.regionType === 'faces') {\n        this.addQualifier(new Qualifier('e', `pixelate_faces${str}`));\n      }\n    } else {\n      this.addQualifier(new Qualifier('e', `pixelate${str}`));\n    }\n  }\n\n  static fromJson(actionModel) {\n    const {\n      actionType,\n      region,\n      squareSize\n    } = actionModel; // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\n    // This allows the inheriting classes to determine the class to be created\n\n    const result = new this(squareSize);\n    squareSize && result.squareSize(squareSize);\n\n    if (region && region.RegionType === 'faces') {\n      result.region(faces());\n    }\n\n    if (region && region.RegionType === 'custom') {\n      result.region(custom());\n    }\n\n    return result;\n  }\n\n}\n\nexport { Pixelate };","map":{"version":3,"names":["Qualifier","Action","custom","faces","Pixelate","constructor","squareSize","_actionModel","_squareSize","actionType","region","pixelateRegion","_region","RegionType","regionType","prepareQualifiers","str","qualifiers","forEach","q","addQualifier","fromJson","actionModel","result"],"sources":["/Users/noahgaston/Desktop/Preppers/Client/node_modules/@cloudinary/url-gen/actions/effect/pixelate/Pixelate.js"],"sourcesContent":["import { Qualifier } from \"../../../internal/qualifier/Qualifier.js\";\nimport { Action } from \"../../../internal/Action.js\";\nimport { custom, faces } from \"../../../qualifiers/region.js\";\n/**\n * @description The Action class of the pixelate Builder\n * @extends SDK.Action\n * @memberOf Actions.Effect\n * @see Visit {@link Actions.Effect|Effect} for an example\n */\nclass Pixelate extends Action {\n    constructor(squareSize) {\n        super();\n        this._actionModel = {};\n        this._squareSize = squareSize;\n        this._actionModel.actionType = 'pixelate';\n        this._actionModel.squareSize = squareSize;\n    }\n    /**\n     * @description Specifies the region to piexlate.\n     * @param {NamedRegion} pixelateRegion\n     */\n    region(pixelateRegion) {\n        this._region = pixelateRegion;\n        this._actionModel.region = { RegionType: this._region.regionType };\n        return this;\n    }\n    /**\n     * @description Sets the squareSize of the pixelate effect.\n     * @param {number | string} squareSize\n     */\n    squareSize(squareSize) {\n        this._squareSize = squareSize;\n        this._actionModel.squareSize = squareSize;\n        return this;\n    }\n    prepareQualifiers() {\n        /*\n         * pixelate with region is a unique object in this codebase.\n         * On top of pixelate being an Action with Qualifiers,\n         * it also accepts a Qualifier called Region.\n         *\n         * This Qualifier is in itself composite of qualifiers (such as height, or width).\n         * The existence of Region changes the output of pixelate in non traditional ways\n         * which forced this relatively ad-hoc implementation.\n         *\n         * Aside from all of that, all of the Qualifiers in the component should be alphabetized\n         * This happens naturally in the Action class,\n         * however since we're dealing with two levels of qualifiers (pixelate and Region),\n         * these need to be merged.\n         *\n         * This function will merge the Region qualifiers with pixelate\n         * and add all needed implicit qualifiers (like g_ocr_text).\n         * We're not using the full Gravity Qualifier here to prevent the code import for such a simplistic case\n         */\n        const str = this._squareSize ? `:${this._squareSize}` : '';\n        if ('_region' in this) {\n            const qualifiers = this._region.qualifiers;\n            // Copy qualifiers from the region \"action\" to the pixelate action\n            qualifiers.forEach((q) => this.addQualifier(q));\n            if (this._region.regionType === 'named') {\n                this.addQualifier(new Qualifier('e', `pixelate_region${str}`));\n            }\n            if (this._region.regionType === 'ocr_text') {\n                this.addQualifier(new Qualifier('e', `pixelate_region${str}`));\n                this.addQualifier(new Qualifier('g', `ocr_text`));\n            }\n            if (this._region.regionType === 'faces') {\n                this.addQualifier(new Qualifier('e', `pixelate_faces${str}`));\n            }\n        }\n        else {\n            this.addQualifier(new Qualifier('e', `pixelate${str}`));\n        }\n    }\n    static fromJson(actionModel) {\n        const { actionType, region, squareSize } = actionModel;\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\n        // This allows the inheriting classes to determine the class to be created\n        const result = new this(squareSize);\n        squareSize && result.squareSize(squareSize);\n        if (region && region.RegionType === 'faces') {\n            result.region(faces());\n        }\n        if (region && region.RegionType === 'custom') {\n            result.region(custom());\n        }\n        return result;\n    }\n}\nexport { Pixelate };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}