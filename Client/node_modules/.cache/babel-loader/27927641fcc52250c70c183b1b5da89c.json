{"ast":null,"code":"// use this to decode a token and get the user's information out of it\nimport decode from 'jwt-decode'; // create a new class to instantiate for a user\n\nclass AuthService {\n  // check if user's logged in\n  loggedIn() {\n    const token = localStorage.getItem('token');\n    return !!token && !this.isTokenExpired(token);\n  } // check if token is expired\n\n\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token'); // this will reload the page and reset the state of the application\n\n    window.location.assign('/');\n  }\n\n}\n\nexport default new AuthService();","map":{"version":3,"names":["decode","AuthService","loggedIn","token","localStorage","getItem","isTokenExpired","decoded","exp","Date","now","err","login","idToken","setItem","window","location","assign","logout","removeItem"],"sources":["/Users/noahgaston/Desktop/Preppers/Client/src/utils/auth.js"],"sourcesContent":["// use this to decode a token and get the user's information out of it\nimport decode from 'jwt-decode';\n\n// create a new class to instantiate for a user\nclass AuthService {\n\n  // check if user's logged in\n  loggedIn() {\n    const token = localStorage.getItem('token');\n    return !!token && !this.isTokenExpired(token);\n  }\n\n  // check if token is expired\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n"],"mappings":"AAAA;AACA,OAAOA,MAAP,MAAmB,YAAnB,C,CAEA;;AACA,MAAMC,WAAN,CAAkB;EAEhB;EACAC,QAAQ,GAAG;IACT,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd;IACA,OAAO,CAAC,CAACF,KAAF,IAAW,CAAC,KAAKG,cAAL,CAAoBH,KAApB,CAAnB;EACD,CANe,CAQhB;;;EACAG,cAAc,CAACH,KAAD,EAAQ;IACpB,IAAI;MACF,MAAMI,OAAO,GAAGP,MAAM,CAACG,KAAD,CAAtB;;MACA,IAAII,OAAO,CAACC,GAAR,GAAcC,IAAI,CAACC,GAAL,KAAa,IAA/B,EAAqC;QACnC,OAAO,IAAP;MACD,CAFD,MAEO,OAAO,KAAP;IACR,CALD,CAKE,OAAOC,GAAP,EAAY;MACZ,OAAO,KAAP;IACD;EACF;;EAEDC,KAAK,CAACC,OAAD,EAAU;IACb;IACAT,YAAY,CAACU,OAAb,CAAqB,UAArB,EAAiCD,OAAjC;IACAE,MAAM,CAACC,QAAP,CAAgBC,MAAhB,CAAuB,GAAvB;EACD;;EAEDC,MAAM,GAAG;IACP;IACAd,YAAY,CAACe,UAAb,CAAwB,UAAxB,EAFO,CAGP;;IACAJ,MAAM,CAACC,QAAP,CAAgBC,MAAhB,CAAuB,GAAvB;EACD;;AA/Be;;AAkClB,eAAe,IAAIhB,WAAJ,EAAf"},"metadata":{},"sourceType":"module"}