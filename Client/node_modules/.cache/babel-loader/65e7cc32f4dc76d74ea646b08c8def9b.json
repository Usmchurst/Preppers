{"ast":null,"code":"import { encodeVersion } from \"./encodeVersion.js\";\nimport { getAnalyticsOptions } from \"./getAnalyticsOptions.js\";\nimport { packageVersion } from \"../internal/utils/packageVersion.js\";\n/**\n * @private\n * @description Try to get the node version out of process, if browser just return 0.0.0\n */\n\nfunction getNodeVersion() {\n  const failedVersion = '0.0.0';\n\n  if (typeof window !== 'undefined') {\n    return failedVersion;\n  } else {\n    // node env\n    try {\n      return process.versions.node || failedVersion;\n    } catch (e) {\n      return failedVersion;\n    }\n  }\n}\n/**\n * @private\n * @description Ensure that all values ITrackedPropertiesThroughAnalytics are populated.\n * Accept a partial map of values and returns the complete interface of ITrackedPropertiesThroughAnalytics\n * @param {ITrackedPropertiesThroughAnalytics} trackedAnalytics\n * @param {ITrackedPropertiesThroughAnalytics} trackedAnalytics\n */\n\n\nfunction ensureShapeOfTrackedProperties(trackedAnalytics) {\n  // try to get the process version from node, but if we're on the client return 0.0.0\n  const defaults = {\n    techVersion: getNodeVersion(),\n    sdkCode: 'T',\n    sdkSemver: packageVersion.split('-')[0],\n    responsive: false,\n    placeholder: false,\n    lazyload: false,\n    accessibility: false\n  };\n\n  if (!trackedAnalytics) {\n    return defaults;\n  } else {\n    return Object.assign(Object.assign({}, defaults), trackedAnalytics);\n  }\n}\n/**\n * @private\n * @description Creates the complete SDK signature by using all the values provided by ITrackedPropertiesThroughAnalytics\n *              Creation of the signature\n *              - Set the AlgoVersion of the encoding, this is an internal letter that represents the version\n *                of our encoding algorithm, it will allow us to perform breaking changes if we'll need them.\n *              - Take the constant SDK code (Arbitrary letter chosen for each SDK, for Base that letter is 'T')\n *                this is used to tell apart which SDK is being tracked.\n *              - Take the {major.minor} versions of the node version (techVersion) (14.2, 16.2 etc.)\n *              - Take the full semver of the SDK you wish to track\n *              - Take the features used(lazy, placeholder etc.) and turn them to a letter (for example accessibility -> D)\n *              - Before appending the string, the Versions must be encoded, see the function `encodeVersion` for more details\n *              - Append all the variables to a single string\n *              - In any case of an error, return the single letter 'E'\n *\n * @return {string} sdkAnalyticsSignature\n */\n\n\nexport function getSDKAnalyticsSignature(_trackedAnalytics) {\n  const trackedAnalytics = ensureShapeOfTrackedProperties(_trackedAnalytics);\n  const analyticsOptions = getAnalyticsOptions(trackedAnalytics);\n\n  try {\n    const twoPartVersion = removePatchFromSemver(analyticsOptions.techVersion);\n    const encodedSDKVersion = encodeVersion(analyticsOptions.sdkSemver);\n    const encodedTechVersion = encodeVersion(twoPartVersion);\n    const featureCode = analyticsOptions.feature;\n    const SDKCode = analyticsOptions.sdkCode;\n    const algoVersion = 'A'; // The algo version is determined here, it should not be an argument\n\n    return `${algoVersion}${SDKCode}${encodedSDKVersion}${encodedTechVersion}${featureCode}`;\n  } catch (e) {\n    // Either SDK or Node versions were unparsable\n    return 'E';\n  }\n}\n/**\n * @private\n * @description Removes patch version from the semver if it exists\n *              Turns x.y.z OR x.y into x.y\n * @param {'x.y.z' | 'x.y' | string} semVerStr\n */\n\nfunction removePatchFromSemver(semVerStr) {\n  const parts = semVerStr.split('.');\n  return `${parts[0]}.${parts[1]}`;\n}","map":{"version":3,"names":["encodeVersion","getAnalyticsOptions","packageVersion","getNodeVersion","failedVersion","window","process","versions","node","e","ensureShapeOfTrackedProperties","trackedAnalytics","defaults","techVersion","sdkCode","sdkSemver","split","responsive","placeholder","lazyload","accessibility","Object","assign","getSDKAnalyticsSignature","_trackedAnalytics","analyticsOptions","twoPartVersion","removePatchFromSemver","encodedSDKVersion","encodedTechVersion","featureCode","feature","SDKCode","algoVersion","semVerStr","parts"],"sources":["/Users/noahgaston/Desktop/Preppers/Client/node_modules/@cloudinary/url-gen/sdkAnalytics/getSDKAnalyticsSignature.js"],"sourcesContent":["import { encodeVersion } from \"./encodeVersion.js\";\nimport { getAnalyticsOptions } from \"./getAnalyticsOptions.js\";\nimport { packageVersion } from \"../internal/utils/packageVersion.js\";\n/**\n * @private\n * @description Try to get the node version out of process, if browser just return 0.0.0\n */\nfunction getNodeVersion() {\n    const failedVersion = '0.0.0';\n    if (typeof window !== 'undefined') {\n        return failedVersion;\n    }\n    else {\n        // node env\n        try {\n            return process.versions.node || failedVersion;\n        }\n        catch (e) {\n            return failedVersion;\n        }\n    }\n}\n/**\n * @private\n * @description Ensure that all values ITrackedPropertiesThroughAnalytics are populated.\n * Accept a partial map of values and returns the complete interface of ITrackedPropertiesThroughAnalytics\n * @param {ITrackedPropertiesThroughAnalytics} trackedAnalytics\n * @param {ITrackedPropertiesThroughAnalytics} trackedAnalytics\n */\nfunction ensureShapeOfTrackedProperties(trackedAnalytics) {\n    // try to get the process version from node, but if we're on the client return 0.0.0\n    const defaults = {\n        techVersion: getNodeVersion(),\n        sdkCode: 'T',\n        sdkSemver: packageVersion.split('-')[0],\n        responsive: false,\n        placeholder: false,\n        lazyload: false,\n        accessibility: false\n    };\n    if (!trackedAnalytics) {\n        return defaults;\n    }\n    else {\n        return Object.assign(Object.assign({}, defaults), trackedAnalytics);\n    }\n}\n/**\n * @private\n * @description Creates the complete SDK signature by using all the values provided by ITrackedPropertiesThroughAnalytics\n *              Creation of the signature\n *              - Set the AlgoVersion of the encoding, this is an internal letter that represents the version\n *                of our encoding algorithm, it will allow us to perform breaking changes if we'll need them.\n *              - Take the constant SDK code (Arbitrary letter chosen for each SDK, for Base that letter is 'T')\n *                this is used to tell apart which SDK is being tracked.\n *              - Take the {major.minor} versions of the node version (techVersion) (14.2, 16.2 etc.)\n *              - Take the full semver of the SDK you wish to track\n *              - Take the features used(lazy, placeholder etc.) and turn them to a letter (for example accessibility -> D)\n *              - Before appending the string, the Versions must be encoded, see the function `encodeVersion` for more details\n *              - Append all the variables to a single string\n *              - In any case of an error, return the single letter 'E'\n *\n * @return {string} sdkAnalyticsSignature\n */\nexport function getSDKAnalyticsSignature(_trackedAnalytics) {\n    const trackedAnalytics = ensureShapeOfTrackedProperties(_trackedAnalytics);\n    const analyticsOptions = getAnalyticsOptions(trackedAnalytics);\n    try {\n        const twoPartVersion = removePatchFromSemver(analyticsOptions.techVersion);\n        const encodedSDKVersion = encodeVersion(analyticsOptions.sdkSemver);\n        const encodedTechVersion = encodeVersion(twoPartVersion);\n        const featureCode = analyticsOptions.feature;\n        const SDKCode = analyticsOptions.sdkCode;\n        const algoVersion = 'A'; // The algo version is determined here, it should not be an argument\n        return `${algoVersion}${SDKCode}${encodedSDKVersion}${encodedTechVersion}${featureCode}`;\n    }\n    catch (e) {\n        // Either SDK or Node versions were unparsable\n        return 'E';\n    }\n}\n/**\n * @private\n * @description Removes patch version from the semver if it exists\n *              Turns x.y.z OR x.y into x.y\n * @param {'x.y.z' | 'x.y' | string} semVerStr\n */\nfunction removePatchFromSemver(semVerStr) {\n    const parts = semVerStr.split('.');\n    return `${parts[0]}.${parts[1]}`;\n}\n"],"mappings":"AAAA,SAASA,aAAT,QAA8B,oBAA9B;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,SAASC,cAAT,QAA+B,qCAA/B;AACA;AACA;AACA;AACA;;AACA,SAASC,cAAT,GAA0B;EACtB,MAAMC,aAAa,GAAG,OAAtB;;EACA,IAAI,OAAOC,MAAP,KAAkB,WAAtB,EAAmC;IAC/B,OAAOD,aAAP;EACH,CAFD,MAGK;IACD;IACA,IAAI;MACA,OAAOE,OAAO,CAACC,QAAR,CAAiBC,IAAjB,IAAyBJ,aAAhC;IACH,CAFD,CAGA,OAAOK,CAAP,EAAU;MACN,OAAOL,aAAP;IACH;EACJ;AACJ;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASM,8BAAT,CAAwCC,gBAAxC,EAA0D;EACtD;EACA,MAAMC,QAAQ,GAAG;IACbC,WAAW,EAAEV,cAAc,EADd;IAEbW,OAAO,EAAE,GAFI;IAGbC,SAAS,EAAEb,cAAc,CAACc,KAAf,CAAqB,GAArB,EAA0B,CAA1B,CAHE;IAIbC,UAAU,EAAE,KAJC;IAKbC,WAAW,EAAE,KALA;IAMbC,QAAQ,EAAE,KANG;IAObC,aAAa,EAAE;EAPF,CAAjB;;EASA,IAAI,CAACT,gBAAL,EAAuB;IACnB,OAAOC,QAAP;EACH,CAFD,MAGK;IACD,OAAOS,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBV,QAAlB,CAAd,EAA2CD,gBAA3C,CAAP;EACH;AACJ;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,SAASY,wBAAT,CAAkCC,iBAAlC,EAAqD;EACxD,MAAMb,gBAAgB,GAAGD,8BAA8B,CAACc,iBAAD,CAAvD;EACA,MAAMC,gBAAgB,GAAGxB,mBAAmB,CAACU,gBAAD,CAA5C;;EACA,IAAI;IACA,MAAMe,cAAc,GAAGC,qBAAqB,CAACF,gBAAgB,CAACZ,WAAlB,CAA5C;IACA,MAAMe,iBAAiB,GAAG5B,aAAa,CAACyB,gBAAgB,CAACV,SAAlB,CAAvC;IACA,MAAMc,kBAAkB,GAAG7B,aAAa,CAAC0B,cAAD,CAAxC;IACA,MAAMI,WAAW,GAAGL,gBAAgB,CAACM,OAArC;IACA,MAAMC,OAAO,GAAGP,gBAAgB,CAACX,OAAjC;IACA,MAAMmB,WAAW,GAAG,GAApB,CANA,CAMyB;;IACzB,OAAQ,GAAEA,WAAY,GAAED,OAAQ,GAAEJ,iBAAkB,GAAEC,kBAAmB,GAAEC,WAAY,EAAvF;EACH,CARD,CASA,OAAOrB,CAAP,EAAU;IACN;IACA,OAAO,GAAP;EACH;AACJ;AACD;AACA;AACA;AACA;AACA;AACA;;AACA,SAASkB,qBAAT,CAA+BO,SAA/B,EAA0C;EACtC,MAAMC,KAAK,GAAGD,SAAS,CAAClB,KAAV,CAAgB,GAAhB,CAAd;EACA,OAAQ,GAAEmB,KAAK,CAAC,CAAD,CAAI,IAAGA,KAAK,CAAC,CAAD,CAAI,EAA/B;AACH"},"metadata":{},"sourceType":"module"}