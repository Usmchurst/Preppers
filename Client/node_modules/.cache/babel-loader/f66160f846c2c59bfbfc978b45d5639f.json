{"ast":null,"code":"import { Qualifier } from \"../../../internal/qualifier/Qualifier.js\";\nimport { Action } from \"../../../internal/Action.js\";\nimport { custom, faces } from \"../../../qualifiers/region.js\";\n/**\n * @description The Action class of the blur Builder.\n * @extends SDK.Action\n * @memberOf Actions.Effect\n * @see Visit {@link Actions.Effect|Effect} for an example\n */\n\nclass BlurAction extends Action {\n  constructor(strength) {\n    super();\n    this._actionModel = {};\n    this._strength = strength;\n    this._actionModel.actionType = 'blur';\n    this._actionModel.strength = strength;\n  }\n  /**\n   * @description Specifies the region to blur.\n   * @param {NamedRegion} blurRegion\n   */\n\n\n  region(blurRegion) {\n    this._actionModel.region = {\n      RegionType: blurRegion.regionType\n    };\n    this._region = blurRegion;\n    return this;\n  }\n  /**\n   * @description Sets the strength of the blur effect.\n   * @param {number | string} strength\n   */\n\n\n  strength(strength) {\n    this._strength = strength;\n    this._actionModel.strength = strength;\n    return this;\n  }\n\n  prepareQualifiers() {\n    /*\n     * Blur with region is a unique object in this codebase.\n     * On top of Blur being an Action with Qualifiers,\n     * it also accepts a Qualifier called Region.\n     *\n     * This Qualifier is in itself composite of qualifiers (such as height, or width).\n     * The existence of Region changes the output of Blur in non traditional ways\n     * which forced this relatively ad-hoc implementation.\n     *\n     * Aside from all of that, all of the Qualifiers in the component should be alphabetized\n     * This happens naturally in the Action class,\n     * however since we're dealing with two levels of qualifiers (Blur and Region),\n     * these need to be merged.\n     *\n     * This function will merge the Region qualifiers with Blur\n     * and add all needed implicit qualifiers (like g_ocr_text).\n     * We're not using the full Gravity Qualifier here to prevent the code import for such a simplistic case\n     */\n    const str = this._strength ? `:${this._strength}` : '';\n\n    if ('_region' in this) {\n      const qualifiers = this._region.qualifiers; // Copy qualifiers from the region \"action\" to the blur action\n\n      qualifiers.forEach(q => this.addQualifier(q));\n\n      if (this._region.regionType === 'named') {\n        this.addQualifier(new Qualifier('e', `blur_region${str}`));\n      }\n\n      if (this._region.regionType === 'ocr_text') {\n        this.addQualifier(new Qualifier('e', `blur_region${str}`));\n        this.addQualifier(new Qualifier('g', `ocr_text`));\n      }\n\n      if (this._region.regionType === 'faces') {\n        this.addQualifier(new Qualifier('e', `blur_faces${str}`));\n      }\n    } else {\n      this.addQualifier(new Qualifier('e', `blur${str}`));\n    }\n  }\n\n  static fromJson(actionModel) {\n    const {\n      actionType,\n      strength,\n      region\n    } = actionModel; // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\n    // This allows the inheriting classes to determine the class to be created\n\n    const result = new this(strength);\n    strength && result.strength(strength);\n\n    if (region && region.RegionType === 'faces') {\n      result.region(faces());\n    }\n\n    if (region && region.RegionType === 'custom') {\n      result.region(custom());\n    }\n\n    return result;\n  }\n\n}\n\nexport { BlurAction };","map":{"version":3,"names":["Qualifier","Action","custom","faces","BlurAction","constructor","strength","_actionModel","_strength","actionType","region","blurRegion","RegionType","regionType","_region","prepareQualifiers","str","qualifiers","forEach","q","addQualifier","fromJson","actionModel","result"],"sources":["/Users/noahgaston/Desktop/Preppers/Client/node_modules/@cloudinary/url-gen/actions/effect/blur/Blur.js"],"sourcesContent":["import { Qualifier } from \"../../../internal/qualifier/Qualifier.js\";\nimport { Action } from \"../../../internal/Action.js\";\nimport { custom, faces } from \"../../../qualifiers/region.js\";\n/**\n * @description The Action class of the blur Builder.\n * @extends SDK.Action\n * @memberOf Actions.Effect\n * @see Visit {@link Actions.Effect|Effect} for an example\n */\nclass BlurAction extends Action {\n    constructor(strength) {\n        super();\n        this._actionModel = {};\n        this._strength = strength;\n        this._actionModel.actionType = 'blur';\n        this._actionModel.strength = strength;\n    }\n    /**\n     * @description Specifies the region to blur.\n     * @param {NamedRegion} blurRegion\n     */\n    region(blurRegion) {\n        this._actionModel.region = { RegionType: blurRegion.regionType };\n        this._region = blurRegion;\n        return this;\n    }\n    /**\n     * @description Sets the strength of the blur effect.\n     * @param {number | string} strength\n     */\n    strength(strength) {\n        this._strength = strength;\n        this._actionModel.strength = strength;\n        return this;\n    }\n    prepareQualifiers() {\n        /*\n         * Blur with region is a unique object in this codebase.\n         * On top of Blur being an Action with Qualifiers,\n         * it also accepts a Qualifier called Region.\n         *\n         * This Qualifier is in itself composite of qualifiers (such as height, or width).\n         * The existence of Region changes the output of Blur in non traditional ways\n         * which forced this relatively ad-hoc implementation.\n         *\n         * Aside from all of that, all of the Qualifiers in the component should be alphabetized\n         * This happens naturally in the Action class,\n         * however since we're dealing with two levels of qualifiers (Blur and Region),\n         * these need to be merged.\n         *\n         * This function will merge the Region qualifiers with Blur\n         * and add all needed implicit qualifiers (like g_ocr_text).\n         * We're not using the full Gravity Qualifier here to prevent the code import for such a simplistic case\n         */\n        const str = this._strength ? `:${this._strength}` : '';\n        if ('_region' in this) {\n            const qualifiers = this._region.qualifiers;\n            // Copy qualifiers from the region \"action\" to the blur action\n            qualifiers.forEach((q) => this.addQualifier(q));\n            if (this._region.regionType === 'named') {\n                this.addQualifier(new Qualifier('e', `blur_region${str}`));\n            }\n            if (this._region.regionType === 'ocr_text') {\n                this.addQualifier(new Qualifier('e', `blur_region${str}`));\n                this.addQualifier(new Qualifier('g', `ocr_text`));\n            }\n            if (this._region.regionType === 'faces') {\n                this.addQualifier(new Qualifier('e', `blur_faces${str}`));\n            }\n        }\n        else {\n            this.addQualifier(new Qualifier('e', `blur${str}`));\n        }\n    }\n    static fromJson(actionModel) {\n        const { actionType, strength, region } = actionModel;\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\n        // This allows the inheriting classes to determine the class to be created\n        const result = new this(strength);\n        strength && result.strength(strength);\n        if (region && region.RegionType === 'faces') {\n            result.region(faces());\n        }\n        if (region && region.RegionType === 'custom') {\n            result.region(custom());\n        }\n        return result;\n    }\n}\nexport { BlurAction };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}